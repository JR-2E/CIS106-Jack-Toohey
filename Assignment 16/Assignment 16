# This file pulls from the CD Catalog,
# makes arrays for the items in the catalog,
# and then displays the information to the user


def get_cd_amount(xml_doc):
    cd_amount = int(0)
    g = open('cd_catalog.xml')
    lines = g.readlines()
    cd_catalog = "cd_catalog.xml"
    word = str("<CD>")
    with open(cd_catalog, 'r') as g:
        for line in g:
            words = line.split()
            for i in words:
                if(word in i):
                    cd_amount = cd_amount + 1
        return cd_amount


def build_arrays(array_count, cd_amount, xml_doc):
    titles_array = []
    artists_array = []
    countries_array = []
    prices_array = []
    years_array = []
    if(array_count == 0):
        titles_array = []
        for x in range(0, cd_amount):
            title = xml_doc.getElementsByTagName("TITLE")[x].firstChild.data
            titles_array.append(title)
        return titles_array
    elif(array_count == 1):
        artists_array = []
        for x in range(0, cd_amount):
            artist = xml_doc.getElementsByTagName("ARTIST")[x].firstChild.data
            artists_array.append(artist)
        return artists_array
    elif(array_count == 2):
        countries_array = []
        for x in range(0, cd_amount):
            country = xml_doc.getElementsByTagName("COUNTRY")[x].firstChild.data
            countries_array.append(country)
        return countries_array
    elif(array_count == 3):
        prices_array = []
        for x in range(0, cd_amount):
            price = xml_doc.getElementsByTagName("PRICE")[x].firstChild.data
            prices_array.append(price)
        return prices_array
    elif(array_count == 4):
        years_array = []
        for x in range(0, cd_amount):
            year = xml_doc.getElementsByTagName("YEAR")[x].firstChild.data
            years_array.append(year)
        return years_array
    else:
        print("something went wrong")


def get_average_price(prices_array):
    total = 0
    for count in range(0, len(prices_array)):
        total = total + float(prices_array[count])
    average_price = round((total / len(prices_array)), 2)
    average_price = str(average_price)
    return average_price


def display_results(xml_doc, cd_amount, titles_array, artists_array,
                    countries_array, prices_array,
                    years_array, average_price):
    results_count = cd_amount
    cd_amount = str(cd_amount)
    for x in range(0, results_count):
        print(titles_array[x] + " - " + artists_array[x] + " - " +
              countries_array[x] + " - " + prices_array[x] + " - " +
              years_array[x])
    print("There are " + cd_amount + " CDs in the catalog. " +
          "The average price is $" + average_price + ".")


def main():
    array_count = 0
    from xml.dom import minidom
    xml_doc = minidom.parse("cd_catalog.xml")
    cd_amount = get_cd_amount(xml_doc)
    try:
        for array_count in range(0, 5):
            if(array_count == 0):
                titles_array = build_arrays(array_count,
                                            cd_amount, xml_doc)
            elif(array_count == 1):
                artists_array = build_arrays(array_count,
                                             cd_amount, xml_doc)
            elif(array_count == 2):
                countries_array = build_arrays(array_count,
                                               cd_amount, xml_doc)
            elif(array_count == 3):
                prices_array = build_arrays(array_count,
                                            cd_amount, xml_doc)
            elif(array_count == 4):
                years_array = build_arrays(array_count,
                                           cd_amount, xml_doc)
        average_price = get_average_price(prices_array)
        display_results(xml_doc, cd_amount, titles_array,
                        artists_array, countries_array,
                        prices_array, years_array, average_price)
    except:
        print("Something went wrong - " +
              "Information may be missing from file.")


main()
